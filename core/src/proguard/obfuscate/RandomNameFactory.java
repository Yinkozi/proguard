/*
 * ProGuard -- shrinking, optimization, obfuscation, and preverification
 *             of Java bytecode.
 *
 * Copyright (c) 2002-2018 GuardSquare NV
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package proguard.obfuscate;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Random;
import java.util.Set;

/**
 * This <code>NameFactory</code> generates random unique names,
 * using mixed-case characters, digits and '_', that begin with
 * either a character or the underscore.
 *
 */
public class RandomNameFactory implements NameFactory {

    private static final Charset UTF8_CHARSET = Charset.forName("UTF-8");

    private static final String UPPER = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String LOWER = UPPER.toLowerCase(Locale.ROOT);
    private static final String VALID_FIRST_CHARS = UPPER + LOWER;
    private static final String SYMBOL_POOL = VALID_FIRST_CHARS + "_0123456789";

    private static final String UTF8_VALID_FIRST_CHARS;
    private static final String UTF8_SYMBOL_POOL;

    /**
     * Copied from Android source, DexString#isSimpleNameChar.
     * https://android.googlesource.com/platform/external/r8/+/master/src/main/java/com/android/tools/r8/graph/DexString.java
     */
    private static boolean isValidDexChar(char ch) {
        if (ch >= 'A' && ch <= 'Z') {
            return true;
        }
        if (ch >= 'a' && ch <= 'z') {
            return true;
        }
        if (ch >= '0' && ch <= '9') {
            return true;
        }
        if (ch == '$' || ch == '-' || ch == '_') {
            return true;
        }
        if (ch >= 0x00a1 && ch <= 0x1fff) {
            return true;
        }
        if (ch >= 0x2010 && ch <= 0x2027) {
            return true;
        }
        if (ch >= 0x2030 && ch <= 0xd7ff) {
            return true;
        }
        if (ch >= 0xe000 && ch <= 0xffef) {
            return true;
        }
        if (ch >= 0x10000 && ch <= 0x10ffff) {
            return true;
        }
        return false;
    }

    static {
        // get all the valid UTF-8 encoded characters for Java identifiers
        char[] sbstart = new char[0xffff];
        char[] sbpart = new char[0xffff];

        int sbstartIdx = 0;
        int sbpartIdx = 0;

        for (char c = 0x30; c < 0xffff; c++) {
            if (!isValidDexChar(c)) {
                continue;
            }

            if (Character.isJavaIdentifierStart(c) && c != '<') {
                sbstart[sbstartIdx++] = c;
            }

            if (Character.isJavaIdentifierPart(c)) {
                sbpart[sbpartIdx++] = c;
            }
        }

        sbstart = Arrays.copyOfRange(sbstart, 0, sbstartIdx);
        sbpart = Arrays.copyOfRange(sbpart, 0, sbpartIdx);

        UTF8_VALID_FIRST_CHARS = new String(sbstart);
        UTF8_SYMBOL_POOL = new String(sbpart);
    }


    private static final int MIN_STR_LEN = 1;  // inclusive
    private static final int MAX_STR_LEN = 10; // exclusive


    private final Random random;
    private final char[] symbols_first;
    private final char[] symbols;

    private int index;
    private final List<String> cached;
    private final Set<String> namesToAvoid;


    /**
     * Creates a new <code>RandomNameFactory</code> that generates
     * random mixed-case names, generated by a random generator with seed = 0
     */
    public RandomNameFactory(boolean utf8Names) {
        this(0, utf8Names);
    }

    /**
     * Creates a new <code>RandomNameFactory</code> that generates
     * random mixed-case names, generated by a random generator with
     * the given seed.
     */
    public RandomNameFactory(long seed, boolean utf8Names) {
        this(new Random(seed), utf8Names);
    }

    /**

     * Creates a new <code>RandomNameFactory</code> that generates
     * random mixed-case names, generated by the given Random.
     */
    public RandomNameFactory(Random random, boolean utf8Names) {
        this.random = random;
        this.index = 0;
        this.cached = new ArrayList<String>(10);
        this.namesToAvoid = new HashSet<String>();

        if (utf8Names) {
            symbols_first = UTF8_VALID_FIRST_CHARS.toCharArray();
            symbols = UTF8_SYMBOL_POOL.toCharArray();
        } else {
            symbols_first = VALID_FIRST_CHARS.toCharArray();
            symbols = SYMBOL_POOL.toCharArray();
        }
    }


    // Implementations for NameFactory.

    public void reset() {
        this.index = 0;
    }

    public String nextName() {
        String name;

        if (index < cached.size()) {
            name = cached.get(index);
        } else {
            do {
                name = generateRandomName();
            } while (namesToAvoid.contains(name));

            cached.add(name);
            namesToAvoid.add(name);
        }

        index++;
        return name;
    }

    private String generateRandomName() {
        int len = MIN_STR_LEN + random.nextInt(MAX_STR_LEN - MIN_STR_LEN);
        char[] buffer = new char[len];
        buffer[0] = symbols_first[random.nextInt(symbols_first.length)];

        for (int i = 1; i < buffer.length; i++) {
            buffer[i] = symbols[random.nextInt(symbols.length)];
        }
        return new String(buffer);
    }


    public static void main(String[] args) {
        long seed = 1;

        RandomNameFactory rnf = new RandomNameFactory(seed, true);
        System.out.println("Some names:");
        printNameSamples(rnf, 5);
        System.out.println("Some more names:");
        printNameSamples(new RandomNameFactory(seed, true), 10);

        rnf.reset();
        System.out.println("Some more names after reset:");
        printNameSamples(rnf, 10);
    }

    private static void printNameSamples(RandomNameFactory factory, int count) {
        for (int counter = 0; counter < count; counter++) {
            System.out.println("  [" + factory.nextName() + "]");
        }
    }
}
